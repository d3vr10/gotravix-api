name: "Build, Test, and Deploy"

on:
  push:
    branches:
      # - main
      - arturo_dev

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Get repo name
        run: |
          echo "REPO_NAME=$(basename ${{github.repository}})" >> $GITHUB_ENV
      - name: Fetch changes, build and deploy
        env:
          VPS_KEY: "${{secrets.VPS_KEY}}"
          VPS_USER: "${{secrets.VPS_USER}}"
          VPS_HOST: "${{secrets.VPS_HOST}}"
        run: |
          echo  "${VPS_KEY}" > private.key && chmod 600 private.key;
          ssh -i private.key -o StrictHostKeyChecking=no "${VPS_USER}"@"${VPS_HOST}" <<END
            set -x
            echo "Making temporary directory...";
            TEMP_DIR=$(mktemp -d);
            cd "$TEMP_DIR";
            echo "Entered temporary directory: $TEMP_DIR";
            git clone --branch ${{github.ref_name}} --depth 1 "${{github.server_url}}/${{github.repository}}.git";
            cd "$REPO_NAME";
            git checkout "${{github.ref_name}}";
            find . -name '*.sh' -type f -exec chmod u+x {} \;
            cp ~/env/${REPO_NAME}/.env .env;
            echo "Copied envars"
            

            echo "Rebuilding images...";
            sudo docker compose --env-file .env -f docker/docker-compose-prod.yml build;

            if [ $? -ne 0 ]; then
              echo "Build failed, exiting.";
              exit 1;
            fi

            echo "Dropping old containers ...";
            sudo docker compose -f docker/docker-compose-prod.yml down --remove-orphans gotravix-api db-migrator;

            if [ $? -ne 0 ]; then
              echo "Failed to stop old containers, exiting.";
              exit 1;
            fi

            WAIT_TIME=2 echo "Waiting ${WAIT_TIME}s before deploying for safety's sake" && sleep $WAIT_TIME

            echo "Deploying new containers...";
            sudo docker compose --env-file .env -f docker/docker-compose-prod.yml up -d gotravix-api db-migrator;

            if [ $? -ne 0 ]; then
              echo "Deployment failed, rolling back!";
              sudo docker compose -f docker/docker-compose-prod.yml down --remove-orphans gotravix-api db-migrator;
              cd ~/"${REPO_NAME}";
              sudo docker compose --env-file .env -f docker/docker-compose-prod.yml up -d gotravix-api db-migrator;
              if [ $? -ne 0 ]; then
                echo "Rollback failed, Admistrator needs to fix the issue!";
                echo "Exiting"
                exit 1;
              fi
              echo "Rollback successful!";
              echo "Exiting"
              exit 1;
            fi

            echo "Successfully deployed ${REPO_NAME} on branch ${{github.ref_name}}";
            rm -rf ~/"${REPO_NAME}";
            cp -r . ~/"${REPO_NAME}";
            echo "Moved new repo to home directory";
            cd ~/"${REPO_NAME}";
            echo "Cleaning up temporary directory...";
            rm -rf "$TEMP_DIR";
            echo "Done!";
          END


        shell: bash
    





